---
description: 
globs: 
alwaysApply: false
---

# Using DuckDB Secrets Manager in C++ Extensions

## Introduction

DuckDB version 0.10.0 introduced a dedicated Secrets Manager to handle sensitive information like API keys, passwords, and connection strings required by extensions. Previously, such information was often managed through DuckDB's general settings system, leading to several challenges:

*   **Cluttered Settings:** A large number of settings made the configuration interface messy.
*   **Lack of Scoping:** It was difficult to manage multiple credentials for the same service (e.g., different S3 buckets with different keys).
*   **Security Risks:** Sensitive information could be easily exposed (e.g., via `from duckdb_settings()`).
*   **Inconsistent Handling:** Different extensions managed configuration and authentication in slightly different ways.
*   **Transactional Safety:** Managing secrets via settings wasn't transactionally safe.

The Secrets Manager provides a unified, secure, and extensible way to manage these credentials.

**Benefits:**

*   **Uniform Interface:** Consistent SQL commands (`CREATE SECRET`, `DROP SECRET`) and C++ APIs for managing secrets across different extensions (httpfs, azure, postgres, mysql, etc.).
*   **Scoped Secrets:** Secrets can be scoped to specific paths or prefixes (e.g., different credentials for `s3://bucket1/` and `s3://bucket2/`).
*   **Persistence:** Secrets can be stored persistently within the DuckDB database file.
*   **Transactional Safety:** Secret management operations are transactionally safe within a single DuckDB instance.
*   **Security:** A separate code path helps harden against accidental exposure or misuse.
*   **Extensibility:** Third parties can build custom secret management solutions on top of DuckDB.

*(Based on concepts introduced in [DuckDB PR #10042](https://github.com/duckdb/duckdb/pull/10042))*

## Core Concepts

Understanding these concepts is key to using the Secrets Manager effectively:

1.  **Secret Type:** Identifies the service or mechanism the secret is used for (e.g., `S3`, `GCS`, `R2`, `AZURE`, `POSTGRES`, `MYSQL`). Your extension will typically define its own custom type.
2.  **Secret Provider:** Defines *how* a secret of a specific type is created. Each type can have multiple providers. Examples:
    *   `CONFIG`: The user provides explicit key-value parameters (like `user`, `password`, `host`).
    *   `CONNECTION_STRING`: The user provides a connection string which is parsed.
    *   `CREDENTIAL_CHAIN`: The secret is automatically created by probing standard credential sources (e.g., environment variables, config files, cloud provider metadata services). This is common for `S3`, `GCS`, `R2`, `AZURE`.
3.  **Secret Scope (Optional):** A prefix or path that determines where a specific secret applies. This allows using different credentials for different resources accessed via the same extension (e.g., different Postgres databases).
4.  **Secret Storage:** Where the secrets are stored (e.g., `duckdb` for persistent storage, `temporary` for in-memory).

## Integrating Secrets into Your Extension

Integrating secrets typically involves two steps: registering your secret type during extension loading and retrieving the appropriate secret when your extension needs to authenticate or configure access to an external resource.

### 1. Registering Your Secret Type and Providers (Setup)

This is usually done within your extension's `Load` method. You need to inform the `SecretManager` about the type of secrets your extension uses and how they can be created (the providers).

*   **Get the Secret Manager:** Access the `SecretManager` instance from the `DatabaseInstance`.
*   **Define Secret Type:** Create a `SecretType` struct. This defines the name (e.g., "postgres", "mysql"), the provider(s), and potentially functions to handle serialization/deserialization if needed.
*   **Define Providers:** For each provider (like `CONFIG`), specify the required or optional named parameters.
*   **Register:** Call `SecretManager::RegisterSecretType` with your defined `SecretType`.

**Example (`duckdb-postgres`):**

```cpp
// In postgres_extension.cpp Load function

// Get Secret Manager
auto &secret_manager = SecretManager::Get(db);

// Define Parameters for the 'config' provider
vector<string> postgres_provider_define;
postgres_provider_define.emplace_back("host");
// ... other parameters like port, user, password, database ...

// Create the SecretType struct
SecretType postgres_secret_type;
postgres_secret_type.name = "postgres";
postgres_secret_type.provider = "config"; // Default provider if not specified by user
// Add the 'config' provider definition
postgres_secret_type.providers["config"] = {
    // Required parameters (empty means none strictly required, but usually some are)
    {},
    // Optional parameters
    {"host", "port", "user", "password", "database", "connect_timeout", "sslmode", "options"}
};
// Define how to create the secret from parameters (implementation not shown here)
postgres_secret_type.create_secret_function = PostgresCredentials::CreateSecretFunction;
// ... (optional serialization/deserialization functions)

// Register the type
secret_manager.RegisterSecretType(postgres_secret_type);

// Register an alias 'pgsql' for 'postgres'
secret_manager.RegisterSecretTypeAlias("postgres", "pgsql");
```

*(See full example: [duckdb-postgres/src/postgres_extension.cpp](https://github.com/duckdb/duckdb-postgres/blob/main/src/postgres_extension.cpp))*

**Example (`duckdb-mysql`):**

Similar structure, defining parameters relevant to MySQL.

```cpp
// In mysql_extension.cpp Load function

auto &secret_manager = SecretManager::Get(db);

SecretType mysql_secret_type;
mysql_secret_type.name = "mysql";
mysql_secret_type.provider = "config";
mysql_secret_type.providers["config"] = {
    {}, // Required params
    {"user", "password", "host", "port", "database", "socket"} // Optional params
};
mysql_secret_type.create_secret_function = MySQLCredentials::CreateSecretFunction;
// ...

secret_manager.RegisterSecretType(mysql_secret_type);
```

*(See full example: [duckdb-mysql/src/mysql_extension.cpp](https://github.com/duckdb/duckdb-mysql/blob/93469fc39a317acf916627e0ddc724a076bf7302/src/mysql_extension.cpp))*

### 2. Retrieving Secrets (Usage)

When your extension performs an operation that requires credentials (e.g., connecting to a database, accessing a remote file), it needs to query the `SecretManager`.

*   **Get Secret Manager:** Access the `SecretManager`.
*   **Determine Scope/Path:** Identify the relevant path or scope for the operation (e.g., the database name or a file path).
*   **Lookup Secret:** Call `SecretManager::LookupSecret` (or related functions like `GetSecretByTypeAndName`). This function takes the path/scope and the secret type ("postgres", "mysql", etc.) and returns the best matching `SecretEntry`. The manager handles finding the most specific secret based on its scope.
*   **Use Secret:** The returned `SecretEntry` contains the actual `BaseSecret` object created by your `create_secret_function`. Cast this to your specific credential type (e.g., `PostgresCredentials`, `MySQLCredentials`) and use the parameters stored within it.

**Example (`duckdb-postgres`):**

```cpp
// In postgres_catalog.cpp GetSecret Function

string GetSecret(ClientContext &context, const string& secret_name) {
    // Get Secret Manager
    auto &secret_manager = SecretManager::Get(context);

    // Transaction context for secret lookup
    auto &transaction = Transaction::Get(context, catalog);
    auto transaction_context = transaction.GetContext();

    // Lookup the secret by name (or potentially by scope/path)
    auto secret_entry = secret_manager.LookupSecret(transaction_context, secret_name, "postgres"); // "postgres" is the type

    if (!secret_entry) {
        // Handle case where secret is not found
        throw BinderException("Secret with name '%s' not found", secret_name);
    }

    // Cast the BaseSecret to your specific type
    const auto &secret = dynamic_cast<const PostgresCredentials&>(secret_entry->secret);

    // Construct connection string or use parameters directly
    stringDSN dsn;
    // ... populate dsn using secret.host, secret.port, secret.user, etc. ...
    return dsn.GenerateConnectionString();
}
```

*(See relevant function: [duckdb-postgres/src/storage/postgres_catalog.cpp#L59](https://github.com/duckdb/duckdb-postgres/blob/98482ce5c144287f01e738275892cdb84ea9b5ce/src/storage/postgres_catalog.cpp#L59))*

**Example (`duckdb-mysql`):**

```cpp
// In mysql_catalog.cpp GetSecretSettings Function

unique_ptr<MySQLSecret> MySQLCatalog::GetSecretSettings(ClientContext &context, const string &secret_name) {
    auto &secret_manager = SecretManager::Get(context);
    auto &transaction = Transaction::Get(context, catalog);
    auto transaction_context = transaction.GetContext();

    // Lookup secret by name and type "mysql"
    auto secret_entry = secret_manager.LookupSecret(transaction_context, secret_name, "mysql");
    if (!secret_entry) {
        // ... handle error ...
    }

    // Cast and return the specific secret object
    const auto &base_secret = dynamic_cast<const MySQLCredentials&>(secret_entry->secret);
    auto secret = make_uniq<MySQLSecret>();
    // ... populate secret object using base_secret.user, base_secret.password, etc. ...
    return secret;
}
```

*(See relevant function: [duckdb-mysql/src/storage/mysql_catalog.cpp#L61](https://github.com/duckdb/duckdb-mysql/blob/93469fc39a317acf916627e0ddc724a076bf7302/src/storage/mysql_catalog.cpp#L61))*

## C++ API Reference (Key Functions)

These are some of the primary C++ classes and functions you'll interact with in `secret_manager.hpp` and related files:

*   **`duckdb::SecretManager`**
    *   `static SecretManager &Get(DatabaseInstance &db)`: Get the SecretManager instance associated with the database.
    *   `static SecretManager &Get(ClientContext &context)`: Get the SecretManager instance associated with the client context.
    *   `void RegisterSecretType(SecretType &type)`: Registers a new type of secret (e.g., "postgres") and its associated providers and functions.
    *   `void RegisterSecretTypeAlias(const string &type_name, const string &alias_name)`: Creates an alias for an existing secret type name.
    *   `optional_ptr<SecretEntry> LookupSecret(SecretTransaction &transaction, const string &path, const string &type)`: Finds the best matching secret of the given `type` for the specified `path` (scope). Returns a `SecretEntry` containing the `BaseSecret`.
    *   `optional_ptr<SecretEntry> GetSecretByTypeAndName(SecretTransaction &transaction, const string &type, const string &name)`: Retrieves a specific secret by its type and unique name.

*   **`duckdb::SecretType`** (Struct)
    *   `string name`: The name of the secret type (e.g., "postgres").
    *   `string provider`: The name of the default provider.
    *   `case_insensitive_map_t<SecretProvider>` providers: Map of provider names to their definitions (`SecretProvider`).
    *   `create_secret_t create_secret_function`: Function pointer (`std::function<unique_ptr<BaseSecret>(ClientContext &, CreateSecretInput &)>`) responsible for creating an instance of your `BaseSecret` subclass from user input (`CreateSecretInput`).
    *   *Optional serialization/deserialization functions if persistence is needed.*

*   **`duckdb::SecretProvider`** (Struct)
    *   `vector<string> required_parameters`: List of parameter names required by this provider.
    *   `vector<string> optional_parameters`: List of optional parameter names.

*   **`duckdb::BaseSecret`**
    *   The abstract base class for all secrets. Your extension will define a struct/class inheriting from this to hold the actual credential data (e.g., `PostgresCredentials : public BaseSecret`).
    *   Contains common fields like `type`, `provider`, `name`.
    *   You add members specific to your secret type (e.g., `host`, `port`, `user`, `password`).

*   **`duckdb::CreateSecretInput`**
    *   Passed to your `create_secret_function`.
    *   Contains information provided by the user via `CREATE SECRET`, such as `type`, `provider`, `name`, `scope`, and the `named_args` map holding the key-value parameters.

*   **`duckdb::SecretEntry`**
    *   Returned by lookup functions.
    *   Contains the actual `BaseSecret` instance (`secret`), storage type, name, scope, etc.

*   **`duckdb::SecretTransaction`**
    *   Represents the transactional context for secret operations. Obtain via `Transaction::Get(context, catalog).GetContext()`.

Remember to include the relevant headers, primarily `#include "duckdb/main/secret/secret_manager.hpp"`. Consult the DuckDB source code (especially `src/include/duckdb/main/secret/`) and the example extensions for more detailed usage and specific function signatures.
