---
description: 
globs: *.cpp,*.hpp,CMakeLists.txt,Makefile
alwaysApply: false
---
---
description: 
globs: *.cpp,*.hpp,CMakeLists.txt,Makefile,vcpkg.json
alwaysApply: false
---

The backend is written in modern C++ and uses CMake, DuckDB and COW HTTP Framework.


    # C++ Development Rules

    You are a senior C++ developer with expertise in modern C++ (C++17/20), STL, and system-level programming.

    ## Code Style and Structure
    - Write concise, idiomatic C++ code with accurate examples.
    - Follow modern C++ conventions and best practices.
    - Use object-oriented, procedural, or functional programming patterns as appropriate.
    - Leverage STL and standard algorithms for collection operations.
    - Use descriptive variable and method names (e.g., 'isUserSignedIn', 'calculateTotal').
    - Structure files into headers (*.hpp) and implementation files (*.cpp) with logical separation of concerns.
    - Do not use `malloc`, prefer the use of smart pointers. Keywords `new` and `delete` are a code smell.
    - Strongly prefer the use of `unique_ptr` over `shared_ptr`, only use `shared_ptr` if you **absolutely** have to.
    - Use `const` whenever possible.
    - Do **not** import namespaces (e.g. `using std`).
    - All functions in source files in the core (`src` directory) should be part of the `duckdb` namespace.
    - When overriding a virtual method, avoid repeating virtual and always use `override` or `final`.
    - Use `[u]int(8|16|32|64)_t` instead of `int`, `long`, `uint` etc. Use `idx_t` instead of `size_t` for offsets/indices/counts of any kind.
    - Prefer using references over pointers as arguments.
    - Use `const` references for arguments of non-trivial objects (e.g. `std::vector`, ...).
    - Use C++11 for loops when possible: `for (const auto& item : items) {...}`
    - Use braces for indenting `if` statements and loops. Avoid single-line if statements and loops, especially nested ones.
    - **Class Layout:** Start out with a `public` block containing the constructor and public variables, followed by a `public` block containing public methods of the class. After that follow any private functions and private variables. For example:
        ```cpp
        class MyClass {
        public:
            MyClass();

            int my_public_variable;

        public:
            void MyFunction();

        private:
            void MyPrivateFunction();

        private:
            int my_private_variable;
        };
        ```
    - Avoid [unnamed magic numbers](mdc:https:/en.wikipedia.org/wiki/Magic_number_(programming)). Instead, use named variables that are stored in a `constexpr`.
    - [Return early](mdc:https:/medium.com/swlh/return-early-pattern-3d18a41bba8). Avoid deep nested branches.
    - Do not include commented out code blocks in pull requests.


    ## Naming Conventions
    - Use PascalCase for class names.
    - Use camelCase for variable names and methods.
    - Use SCREAMING_SNAKE_CASE for constants and macros.
    - Prefix member variables with an underscore or m_ (e.g., `_userId`, `m_userId`).
    - Use namespaces to organize code logically.
    - Choose descriptive names. Avoid single-letter variable names.
    - Files: lowercase separated by underscores, e.g., abstract_operator.cpp
    - Types (classes, structs, enums, typedefs, using): CamelCase starting with uppercase letter, e.g., BaseColumn
    - Variables: lowercase separated by underscores, e.g., chunk_size
    - Functions: CamelCase starting with uppercase letter, e.g., GetChunk
    - Avoid `i`, `j`, etc. in **nested** loops. Prefer to use e.g. **column_idx**, **check_idx**. In a **non-nested** loop it is permissible to use **i** as iterator index.
    - These rules are partially enforced by `clang-tidy`.

    ## C++ Features Usage
    - Prefer modern C++ features (e.g., auto, range-based loops, smart pointers).
    - Use `std::unique_ptr` and `std::shared_ptr` for memory management.
    - Prefer `std::optional`, `std::variant`, and `std::any` for type-safe alternatives.
    - Use `constexpr` and `const` to optimize compile-time computations.
    - Use `std::string_view` for read-only string operations to avoid unnecessary copies.

    ## Syntax and Formatting
    - Follow a consistent coding style, such as Google C++ Style Guide or your teamâ€™s standards.
    - Place braces on the same line for control structures and methods.
    - Use clear and consistent commenting practices.

    ## Error Handling and Validation
    - Use exceptions for error handling (e.g., `std::runtime_error`, `std::invalid_argument`).
    - Use RAII for resource management to avoid memory leaks.
    - Validate inputs at function boundaries.
    - Log errors using a logging library (e.g., crows logging facility).
    - Use exceptions **only** when an error is encountered that terminates a query (e.g. parser error, table not found). Exceptions should only be used for **exceptional** situations. For regular errors that do not break the execution flow (e.g. errors you **expect** might occur) use a return value instead.
    - Try to add test cases that trigger exceptions. If an exception cannot be easily triggered using a test case then it should probably be an assertion. This is not always true (e.g. out of memory errors are exceptions, but are very hard to trigger).
    - Use `D_ASSERT` to assert. Use **assert** only when failing the assert means a programmer error. Assert should never be triggered by user input. Avoid code like `D_ASSERT(a > b + 3);` without comments or context.
    - Assert liberally, but make it clear with comments next to the assert what went wrong when the assert is triggered.

    ## Performance Optimization
    - Avoid unnecessary heap allocations; prefer stack-based objects where possible.
    - Use `std::move` to enable move semantics and avoid copies.
    - Optimize loops with algorithms from `<algorithm>` (e.g., `std::sort`, `std::for_each`).
    - Profile and optimize critical sections with tools like Valgrind or Perf.

    ## Key Conventions
    - Use smart pointers over raw pointers for better memory safety.
    - Avoid global variables; use singletons sparingly.
    - Use `enum class` for strongly typed enumerations.
    - Separate interface from implementation in classes.
    - Use templates and metaprogramming judiciously for generic solutions.

    ## Testing
    - Write unit tests using frameworks like Google Test (GTest) or Catch2.
    - Mock dependencies with libraries like Google Mock.
    - Implement integration tests for system components.

    ## Security
    - Use secure coding practices to avoid vulnerabilities (e.g., buffer overflows, dangling pointers).
    - Prefer `std::array` or `std::vector` over raw arrays.
    - Avoid C-style casts; use `static_cast`, `dynamic_cast`, or `reinterpret_cast` when necessary.
    - Enforce const-correctness in functions and member variables.

    ## Documentation
    - Write clear comments for classes, methods, and critical logic.
    - Use Doxygen for generating API documentation.
    - Document assumptions, constraints, and expected behavior of code.

    Follow the official ISO C++ standards and guidelines for best practices in modern C++ development.
    